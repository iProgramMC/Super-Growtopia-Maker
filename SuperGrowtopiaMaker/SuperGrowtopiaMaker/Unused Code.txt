// Unused Collision Routine


		    // Handle Input
		    /*if (IsFocused)
		    {
			    if (kbState.IsKeyDown(Keys.Up))
			    {
				    fPlayerVelY = -6.0f;
			    }

			    if (kbState.IsKeyDown(Keys.Down))
			    {
				    fPlayerVelY = 6.0f;
			    }

			    if (kbState.IsKeyDown(Keys.Left))
			    {
				    fPlayerVelX += (bPlayerOnGround ? -25.0f : -15.0f)*0.01f;
				    nDirModY = 1;
			    }

			    if (kbState.IsKeyDown(Keys.Right))
			    {
				    fPlayerVelX += (bPlayerOnGround ? 25.0f : 15.0f)*0.01f;
				    nDirModY = 0;
			    }

			    if (kbState.IsKeyDown(Keys.Space) && prevKbState.IsKeyUp(Keys.Space))
			    {
				    if (fPlayerVelY == 0)
				    {
					    fPlayerVelY = -12.0f;
					    nDirModX = 1;
				    }
			    }
		    }

		    // Gravity
		    fPlayerVelY += 20.0f * fElapsedTime;

		    // Drag
		    if (bPlayerOnGround)
		    {
			    fPlayerVelX += -3.0f * fPlayerVelX * fElapsedTime;
			    if (Math.Abs(fPlayerVelX) < 0.01f)
				    fPlayerVelX = 0.0f;
		    }

		    // Clamp velocities
		    if (fPlayerVelX > 10.0f)
			    fPlayerVelX = 10.0f;

		    if (fPlayerVelX < -10.0f)
			    fPlayerVelX = -10.0f;

		    if (fPlayerVelY > 100.0f)
			    fPlayerVelY = 100.0f;

		    if (fPlayerVelY < -100.0f)
			    fPlayerVelY = -100.0f;

		    // Calculate potential new position
		    float fNewPlayerPosX = fPlayerPosX + fPlayerVelX * 0.1f;
            float fNewPlayerPosY = fPlayerPosY + fPlayerVelY * 0.1f;

		    // Check for pickups!
            if (GetTile((int)fNewPlayerPosX + 0.0f, (int)fNewPlayerPosY + 0.0f) == 'o')
                SetTile((int)fNewPlayerPosX + 0.0f, (int)(int)fNewPlayerPosY + 0.0f, '.');

            if (GetTile((int)fNewPlayerPosX + 0.0f, (int)fNewPlayerPosY + 1.0f) == 'o')
                SetTile((int)fNewPlayerPosX + 0.0f, (int)fNewPlayerPosY + 1.0f, '.');

            if (GetTile((int)fNewPlayerPosX + 1.0f, (int)fNewPlayerPosY + 0.0f) == 'o')
                SetTile((int)fNewPlayerPosX + 1.0f, (int)fNewPlayerPosY + 0.0f, '.');

            if (GetTile((int)fNewPlayerPosX + 1.0f, (int)fNewPlayerPosY + 1.0f) == 'o')
                SetTile((int)fNewPlayerPosX + 1.0f, (int)fNewPlayerPosY + 1.0f, '.');

		    // Check for Collision
		    if (fPlayerVelX <= 0) // Moving Left
		    {
			    if (GetTile(fNewPlayerPosX + 0.0f, fPlayerPosY + 0.0f) != '.' || GetTile(fNewPlayerPosX + 0.0f, fPlayerPosY + 0.9f) != '.')
			    {
				    fNewPlayerPosX = (int)fNewPlayerPosX + 1;
				    fPlayerVelX = 0;
			    }
		    }
		    else // Moving Right
		    {
			    if (GetTile(fNewPlayerPosX + 1.0f, fPlayerPosY + 0.0f) != '.' || GetTile(fNewPlayerPosX + 1.0f, fPlayerPosY + 0.9f) != '.')
			    {
				    fNewPlayerPosX = (int)fNewPlayerPosX;
				    fPlayerVelX = 0;

			    }
		    }

		    bPlayerOnGround = false;
		    if (fPlayerVelY <= 0) // Moving Up
		    {
			    if (GetTile(fPlayerPosX + 0.0f, fNewPlayerPosY) != '.' || GetTile(fPlayerPosX + 0.9f, fNewPlayerPosY) != '.')
			    {
				    fNewPlayerPosY = (int)fNewPlayerPosY + 1;
				    fPlayerVelY = 0;
			    }
		    }
		    else // Moving Down
		    {
			    if (GetTile(fNewPlayerPosX + 0.0f, fNewPlayerPosY + 1.0f) != '.' || GetTile(fNewPlayerPosX + 0.9f, fNewPlayerPosY + 1.0f) != '.')
			    {
				    fNewPlayerPosY = (int)fNewPlayerPosY;
				    fPlayerVelY = 0;
				    bPlayerOnGround = true; // Player has a solid surface underfoot
				    nDirModX = 0;
			    }
		    }

		    // Apply new position
		    fPlayerPosX = fNewPlayerPosX;
		    fPlayerPosY = fNewPlayerPosY;

		    // Link camera to player position
		    fCameraPosX = fPlayerPosX;
		    fCameraPosY = fPlayerPosY;
            */

//Unused Drawtile Routine

/*switch (sTileID)
                    {
                        case 0: // Sky
                    
                            break;
                        case 2: // Dirt
                            //Fill(x * nTileWidth - fTileOffsetX, y * nTileHeight - fTileOffsetY, (x + 1) * nTileWidth - fTileOffsetX, (y + 1) * nTileHeight - fTileOffsetY, PIXEL_SOLID, FG_RED);
                            DrawPartialSprite((int)(x * nTileWidth - fTileOffsetX), (int)(y * nTileHeight - fTileOffsetY), Tiles_Page1, 8 * nTileWidth, 20 * nTileHeight, nTileWidth, nTileHeight);
                            break;
                        case 3: // Dirt
                            //Fill(x * nTileWidth - fTileOffsetX, y * nTileHeight - fTileOffsetY, (x + 1) * nTileWidth - fTileOffsetX, (y + 1) * nTileHeight - fTileOffsetY, PIXEL_SOLID, FG_RED);
                            DrawPartialSprite((int)(x * nTileWidth - fTileOffsetX), (int)(y * nTileHeight - fTileOffsetY), Tiles_Page1, 8 * nTileWidth, 20 * nTileHeight, nTileWidth, nTileHeight);
                            break;
                        case 6: // Main Door
                            //Fill(x * nTileWidth - fTileOffsetX, y * nTileHeight - fTileOffsetY, (x + 1) * nTileWidth - fTileOffsetX, (y + 1) * nTileHeight - fTileOffsetY, PIXEL_SOLID, FG_RED);
                            DrawPartialSprite((int)(x * nTileWidth - fTileOffsetX), (int)(y * nTileHeight - fTileOffsetY), Tiles_Page1, 17 * nTileWidth, 1 * nTileHeight, nTileWidth, nTileHeight);
                            break;
                        case 8: // Bedrock
                            //Fill(x * nTileWidth - fTileOffsetX, y * nTileHeight - fTileOffsetY, (x + 1) * nTileWidth - fTileOffsetX, (y + 1) * nTileHeight - fTileOffsetY, PIXEL_SOLID, FG_RED);
                            DrawPartialSprite((int)(x * nTileWidth - fTileOffsetX), (int)(y * nTileHeight - fTileOffsetY), Tiles_Page1, 0 * nTileWidth, 26 * nTileHeight, nTileWidth, nTileHeight);
                            break;
                        case 9: // Bedrock Top
                            //Fill(x * nTileWidth - fTileOffsetX, y * nTileHeight - fTileOffsetY, (x + 1) * nTileWidth - fTileOffsetX, (y + 1) * nTileHeight - fTileOffsetY, PIXEL_SOLID, FG_RED);
                            DrawPartialSprite((int)(x * nTileWidth - fTileOffsetX), (int)(y * nTileHeight - fTileOffsetY), Tiles_Page1, 1 * nTileWidth, 26 * nTileHeight, nTileWidth, nTileHeight);
                            break;
                        default:

                            Fill(new Rectangle((int)(x * nTileWidth - fTileOffsetX), (int)(y * nTileHeight - fTileOffsetY), nTileWidth, nTileHeight), Color.Black);
                            break;


                        
                    /*case 'G': // Ground Block
                        DrawPartialSprite((int)(x * nTileWidth - fTileOffsetX), (int)(y * nTileHeight - fTileOffsetY), spriteTiles, 0 * nTileWidth, 0 * nTileHeight, nTileWidth, nTileHeight);
                        break;
                    case 'B': // Brick Block
                        DrawPartialSprite((int)(x * nTileWidth - fTileOffsetX), (int)(y * nTileHeight - fTileOffsetY), spriteTiles, 0 * nTileWidth, 1 * nTileHeight, nTileWidth, nTileHeight);
                        break;
                    case '?': // Question Block
                        DrawPartialSprite((int)(x * nTileWidth - fTileOffsetX), (int)(y * nTileHeight - fTileOffsetY), spriteTiles, 1 * nTileWidth, 1 * nTileHeight, nTileWidth, nTileHeight);
                        break;
                    case 'o': // Coin
                        //Fill(x * nTileWidth - fTileOffsetX, y * nTileHeight - fTileOffsetY, (x + 1) * nTileWidth - fTileOffsetX, (y + 1) * nTileHeight - fTileOffsetY, PIXEL_SOLID, FG_CYAN);
                        DrawPartialSprite((int)(x * nTileWidth - fTileOffsetX), (int)(y * nTileHeight - fTileOffsetY), spriteTiles, 3 * nTileWidth, 0 * nTileHeight, nTileWidth, nTileHeight);
                        break;
                    default:

                        //Fill(x * nTileWidth - fTileOffsetX, y * nTileHeight - fTileOffsetY, (x + 1) * nTileWidth - fTileOffsetX, (y + 1) * nTileHeight - fTileOffsetY, PIXEL_SOLID, FG_BLACK);
                        break;
                    }*/

